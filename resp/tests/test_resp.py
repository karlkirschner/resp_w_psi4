from __future__ import division, absolute_import, print_function

import pytest
import sys

import numpy as np
import psi4

sys.path.insert(1, '../')

import driver as resp


def test_resp_unconstrained_a():
    ''' One-stage fitting of charges.

        - ESP is compute using Psi4
        - resp_a = 0.001

        Reference charges were generated by R.E.D.-III.5 and GAMESS.
    '''

    reference_charges = np.array([-0.294974,  0.107114,  0.107114,  0.084795,
                                   0.803999, -0.661279,  0.453270, -0.600039])

    charges = resp.resp('resp_unconstrained_a.ini')

    print('Unrestrained Electrostatic Potential Charges')
    print(f'{charges[0]}\n')

    print('Restrained Electrostatic Potential (RESP) Charges')
    print(f'{charges[1]}\n')

    print('Reference RESP Charges (via RED-III 5)')
    print(f'{reference_charges}\n')

    print('Difference')
    print(f'{charges[1]-reference_charges}\n')

    assert np.allclose(charges[1], reference_charges, atol=5e-4)


def test_resp_unconstrained_b():
    ''' One-stage fitting of charges.

        - ESP is read in (i.e., output from previous test)
        - resp_a = 0.001

        Reference charges were generated by R.E.D.-III.5 and GAMESS.
    '''

    reference_charges = np.array([-0.294974,  0.107114,  0.107114,  0.084795,
                                   0.803999, -0.661279,  0.453270, -0.600039])

    charges = resp.resp('resp_unconstrained_b.ini')

    print('Unrestrained Electrostatic Potential Charges')
    print(f'{charges[0]}\n')

    print('Restrained Electrostatic Potential (RESP) Charges')
    print(f'{charges[1]}\n')

    print('Reference RESP Charges (via RED-III 5)')
    print(f'{reference_charges}\n')

    print('Difference')
    print(f'{charges[1]-reference_charges}\n')

    assert np.allclose(charges[1], reference_charges, atol=5e-4)


def test_resp_constrained_a():
    ''' Two-stage fitting of charges.

        - ESP is compute using Psi4
        - resp_a = 0.001
        - last four atoms constrained to certain values
        - methyl hydrogens force to be equivalent
    '''

    reference_charges = np.array([-0.290893,  0.098314,  0.098314,  0.098314,
                                   0.803999, -0.661279,  0.453270, -0.600039])

    charges = resp.resp('resp_constrained_a.ini')

    print('Unrestrained Electrostatic Potential Charges')
    print(f'{charges[0]}\n')

    print('Restrained Electrostatic Potential (RESP) Charges')
    print(f'{charges[1]}\n')

    print('Reference RESP Charges (via RED-III 5)')
    print(f'{reference_charges}\n')

    print('Difference')
    print(f'{charges[1]-reference_charges}\n')

    assert np.allclose(charges[1], reference_charges, atol=5e-4)


def test_resp_two_conformers_a():
    ''' One-stage fitting of charges using two conformations.

        - ESP is compute using Psi4
        - resp_a = 0.0005
    '''

    reference_charges = np.array([-0.149134, 0.274292, -0.630868,  0.377965, -0.011016,
                                  -0.009444, 0.058576,  0.044797,  0.044831])

    charges = resp.resp('resp_two_confs_a.ini')

    print('Unrestrained Electrostatic Potential Charges')
    print(f'{charges[0]}\n')

    print('Restrained Electrostatic Potential (RESP) Charges')
    print(f'{charges[1]}\n')

    print('Reference RESP Charges (via RED-III 5)')
    print(f'{reference_charges}\n')

    print('Difference')
    print(f'{charges[1]-reference_charges}\n')

    assert np.allclose(charges[1], reference_charges, atol=1e-5)

def test_resp_two_conformers_b():
    reference_charges = np.array([-0.079853, 0.253918, -0.630868, 0.377965, -0.007711,
                                  -0.007711, 0.031420,  0.031420, 0.031420])

    charges = resp.resp('resp_two_confs_b.ini')

    print('Unrestrained Electrostatic Potential Charges')
    print(f'{charges[0]}\n')

    print('Restrained Electrostatic Potential (RESP) Charges')
    print(f'{charges[1]}\n')

    print('Reference RESP Charges (via RED-III 5)')
    print(f'{reference_charges}\n')

    print('Difference')
    print(f'{charges[1]-reference_charges}\n')

    assert np.allclose(charges[1], reference_charges, atol=1.5e-5)

def test_2_methylpropanol_a():
    reference_charges = np.array([0.421709, -0.019434, 0.258869, -0.046408,
                                 -0.220137, 0.053410, 0.053410, 0.053410,
                                 -0.487560, -0.220137, 0.050956, 0.050956,
                                  0.050956])

    charges = resp.resp('test_2_methylpropanal_a.ini')

    print('Unrestrained Electrostatic Potential Charges')
    print(f'{np.around(charges[0], 3)}\n')

    print('Restrained Electrostatic Potential (RESP) Charges')
    print(f'{np.around(charges[1], 3)}\n')

    print('Reference RESP Charges (via RED-III 5)')
    print(f'{np.around(reference_charges, 3)}\n')

    print('Difference')
    print(f'{np.around(charges[1], 3)-np.around(reference_charges, 3)}\n')

    assert np.allclose(np.around(charges[1], 3), np.around(reference_charges, 3), atol=1.5e-5)


# def test_2_methylpropanol_b():
#     reference_charges = np.array([0.421709, -0.019434, 0.258869, -0.046408,
#                                  -0.220137, 0.053410, 0.053410, 0.053410,
#                                  -0.487560, -0.220137, 0.050956, 0.050956,
#                                   0.050956])

#     charges = resp.resp('test_2_methylpropanal_b.ini')

#     print('Unrestrained Electrostatic Potential Charges')
#     print(f'{charges[0]}\n')

#     print('Restrained Electrostatic Potential (RESP) Charges')
#     print(f'{charges[1]}\n')

#     print('Reference RESP Charges (via RED-III 5)')
#     print(f'{reference_charges}\n')

#     print('Difference')
#     print(f'{charges[1]-reference_charges}\n')

#     assert np.allclose(charges[1], reference_charges, atol=1.5e-5)
